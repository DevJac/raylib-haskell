* Structs
** complex - need unloading
- Music
- Sound
- Wave
- Shader
- Material
- Mesh
- Model
- Font
- Image
- Texture2D / Texture
- RenderTexture2D / RenderTexture
** complex - other
- AudioStream (see CloseAudioStream)
- MaterialMap
- CharInfo
** simple
- Color
- Rectangle
- Vector2
- Vector3
- Vector4
- Quaternion
- Matrix
- Camera
- Camer2D
- Ray
- RayHitInfo
* Storable example
Remember: there is a Vector2 struct in raylib.h

data Vector2 = Vector2 Float Float

instance Storable Vector2 where
    sizeOf = const {# sizeof Vector2 #}
    alignment = const {# alignof Vector2 #}
    peek p = do
        x <- realToFrac <$> {# get Vector2.x #} p
        y <- realToFrac <$> {# get Vector2.y #} p
        pure $ Vector2 x y
    poke p (Vector2 x y) = do
        {# set Vector2.x #} p (realToFrac x)
        {# set Vector2.y #} p (realToFrac y)
* Image pointer example
{# pointer *Image foreign finalizer WrappedUnloadImage as unloadImage newtype #}

imageWidth :: Image -> IO Int
imageWidth image = fromIntegral <$> withForeignPtr (coerce image) width
  where width = {# get Image.width #}

imageHeight :: Image -> IO Int
imageHeight image = fromIntegral <$> withForeignPtr (coerce image) height
  where height = {# get Image.height #}
* Bind plan
** Plan
- [ ] Review Haddock format.

- [X] Identify all the structs used in the public raylib API.

- [ ] Classify those structs as simple, or complex. Complex structs are either unloadable or in a special category. Most of this work has been done, and just needs review.

- [ ] Create Storable bindings for simple structs.

- [ ] Create pointer newtype bindings for complex unloadable structs.

- [ ] Bind Core, and Shapes.

- [ ] Release. Seek feedback.

- [ ] Bind the remaining modules.

- [ ] Improve inspectability of complex structs.
** Project layout
Modules:
- Structs / Types
- Core
- Shapes
- Textures
- Text
- Models
- Shaders
- Audio

Each module will have a "public" version with some Haskell cleanups, and an "Internal" version with c2hs binding code.
